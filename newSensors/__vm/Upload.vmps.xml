<VisualMicro>
  <Program Name="newSensors" Ext=".ino" Location="C:\Users\oitzh\Documents\Arduino\newSensors">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\oitzh\AppData\Local\Temp\VMBuilds\newSensors\esp8266_nodemcuv2\Debug" SketchName="newSensors" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 50;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="esp8266" Platform="esp8266" Architecture="1.20.0-26-gb404fb9-2">
      <Board Name="esp8266_nodemcuv2" Description="NodeMCU 1.0 (ESP-12E Module)" CoreFolder="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0\cores\esp8266" VariantFullPath="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0\variants\nodemcu" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\oitzh\Documents\Arduino" name="NodeMCU 1.0 (ESP-12E Module)" upload.tool="esptool" upload.speed="115200" upload.resetmethod="nodemcu" upload.maximum_size="1044464" upload.maximum_data_size="81920" upload.wait_for_upload_port="true" serial.disableDTR="true" serial.disableRTS="true" build.mcu="esp8266" build.f_cpu="80000000L" build.board="ESP8266_NODEMCU" build.core="esp8266" build.variant="nodemcu" build.flash_mode="dio" build.flash_size="4M" build.flash_freq="40" build.debug_port="" build.debug_level="" menu.CpuFrequency.80="80 MHz" menu.CpuFrequency.80.build.f_cpu="80000000L" menu.CpuFrequency.160="160 MHz" menu.CpuFrequency.160.build.f_cpu="160000000L" menu.UploadSpeed.115200="115200" menu.UploadSpeed.115200.upload.speed="115200" menu.UploadSpeed.9600="9600" menu.UploadSpeed.9600.upload.speed="9600" menu.UploadSpeed.57600="57600" menu.UploadSpeed.57600.upload.speed="57600" menu.UploadSpeed.256000.windows="256000" menu.UploadSpeed.256000.upload.speed="256000" menu.UploadSpeed.230400.linux="230400" menu.UploadSpeed.230400.macosx="230400" menu.UploadSpeed.230400.upload.speed="230400" menu.UploadSpeed.460800.linux="460800" menu.UploadSpeed.460800.macosx="460800" menu.UploadSpeed.460800.upload.speed="460800" menu.UploadSpeed.512000.windows="512000" menu.UploadSpeed.512000.upload.speed="512000" menu.UploadSpeed.921600="921600" menu.UploadSpeed.921600.upload.speed="921600" menu.FlashSize.4M3M="4M (3M SPIFFS)" menu.FlashSize.4M3M.build.flash_size="4M" menu.FlashSize.4M3M.build.flash_ld="eagle.flash.4m.ld" menu.FlashSize.4M3M.build.spiffs_start="0x100000" menu.FlashSize.4M3M.build.spiffs_end="0x3FB000" menu.FlashSize.4M3M.build.spiffs_blocksize="8192" menu.FlashSize.4M3M.build.spiffs_pagesize="256" menu.FlashSize.4M1M="4M (1M SPIFFS)" menu.FlashSize.4M1M.build.flash_size="4M" menu.FlashSize.4M1M.build.flash_ld="eagle.flash.4m1m.ld" menu.FlashSize.4M1M.build.spiffs_start="0x300000" menu.FlashSize.4M1M.build.spiffs_end="0x3FB000" menu.FlashSize.4M1M.build.spiffs_blocksize="8192" menu.FlashSize.4M1M.build.spiffs_pagesize="256" menu.UploadSpeed.256000="256000" menu.UploadSpeed.512000="512000" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0\system" runtime.ide.version="10801" target_package="esp8266" target_platform="esp8266" runtime.hardware.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266" originalid="nodemcuv2" intellisense.tools.path="{compiler.toolchain.path}" intellisense.include.paths="{runtime.tools.xtensa-lx106-elf-gcc.path}\xtensa-lx106-elf\include\c++\4.8.2;{runtime.tools.xtensa-lx106-elf-gcc.path}\xtensa-lx106-elf\include\c++\4.8.2\xtensa-lx106-elf;{runtime.tools.xtensa-lx106-elf-gcc.path}\xtensa-lx106-elf\include;{runtime.tools.xtensa-lx106-elf-gcc.path}\lib\gcc\xtensa-lx106-elf\4.8.2\include;{runtime.platform.path}\tools\sdk\include" tools.wwwfiles.name="ESP8266 Sketch Data Upload" tools.wwwfiles.ssh="false" tools.wwwfiles.cmd.windows="ESP8266FSUpload.exe" recipe.wwwfiles.upload.pattern="&quot;{vm.path}/{tools.wwwfiles.cmd}&quot; -serial.port={serial.port} -build.path=&quot;{build.path}&quot; -target_platform=&quot;{target_platform}&quot; -runtime.tools.mkspiffs.path=&quot;{runtime.tools.mkspiffs.path}&quot; -board.name=&quot;{name}&quot; -upload.verbose={upload.verbose} -upload.resetmethod={upload.resetmethod} -upload.speed={upload.speed}  -platform.path=&quot;{platform.path}&quot; -project.name=&quot;{project.name}&quot; -project.path=&quot;{project.path}&quot; -tools.esptool.cmd=&quot;{tools.esptool.cmd}&quot; -runtime.tools.esptool.path=&quot;{runtime.tools.esptool.path}&quot; -compiler.path=&quot;{compiler.path}&quot; -build.spiffs_start=&quot;{build.spiffs_start}&quot; -build.spiffs_end=&quot;{build.spiffs_end}&quot; -build.spiffs_pagesize=&quot;{build.spiffs_pagesize}&quot; -build.spiffs_blocksize=&quot;{build.spiffs_blocksize}&quot; -network.password={network.password} -network.auth_upload={network.auth_upload} -network.port={network.port}" tools.wwwfiles.cmd="ESP8266FSUpload.exe" version="2.2.0" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" build.lwip_lib="-llwip_gcc" build.lwip_flags="-DLWIP_OPEN_SRC" compiler.path="{runtime.tools.xtensa-lx106-elf-gcc.path}/bin/" compiler.sdk.path="{runtime.platform.path}/tools/sdk" compiler.cpreprocessor.flags="-D__ets__ -DICACHE_FLASH -U__STRICT_ANSI__ &quot;-I{compiler.sdk.path}/include&quot; &quot;-I{compiler.sdk.path}/lwip/include&quot; &quot;-I{build.path}/core&quot;" compiler.c.cmd="xtensa-lx106-elf-gcc" compiler.c.flags="-c {compiler.warning_flags} -Os -g -Wpointer-arith -Wno-implicit-function-declaration -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals -falign-functions=4 -MMD -std=gnu99 -ffunction-sections -fdata-sections" compiler.S.cmd="xtensa-lx106-elf-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -MMD -mlongcalls" compiler.c.elf.flags="-g {compiler.warning_flags} -Os -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static &quot;-L{compiler.sdk.path}/lib&quot; &quot;-L{compiler.sdk.path}/ld&quot; &quot;-T{build.flash_ld}&quot; -Wl,--gc-sections -Wl,-wrap,system_restart_local -Wl,-wrap,register_chipv6_phy" compiler.c.elf.cmd="xtensa-lx106-elf-gcc" compiler.c.elf.libs="-lm -lgcc -lhal -lphy -lpp -lnet80211 -lwpa -lcrypto -lmain -lwps -laxtls -lsmartconfig -lmesh -lwpa2 {build.lwip_lib} -lstdc++" compiler.cpp.cmd="xtensa-lx106-elf-g++" compiler.cpp.flags="-c {compiler.warning_flags} -Os -g -mlongcalls -mtext-section-literals -fno-exceptions -fno-rtti -falign-functions=4 -std=c++11 -MMD -ffunction-sections -fdata-sections" compiler.as.cmd="xtensa-lx106-elf-as" compiler.ar.cmd="xtensa-lx106-elf-ar" compiler.ar.flags="cru" compiler.elf2hex.cmd="esptool" compiler.elf2hex.flags="" compiler.size.cmd="xtensa-lx106-elf-size" compiler.esptool.cmd="esptool.exe" compiler.esptool.cmd.windows="esptool.exe" build.extra_flags="-DESP8266" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.cpreprocessor.flags} {compiler.c.flags} -DF_CPU={build.f_cpu} {build.lwip_flags} {build.debug_port} {build.debug_level} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_BOARD=&quot;{build.board}&quot; {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpreprocessor.flags} {compiler.cpp.flags} -DF_CPU={build.f_cpu} {build.lwip_flags} {build.debug_port} {build.debug_level} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_BOARD=&quot;{build.board}&quot; {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.cpreprocessor.flags} {compiler.S.flags} -DF_CPU={build.f_cpu} {build.lwip_flags} {build.debug_port} {build.debug_level} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_BOARD=&quot;{build.board}&quot; {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; -Wl,--start-group {object_files} &quot;{build.path}/{archive_file}&quot; {compiler.c.elf.libs} -Wl,--end-group  &quot;-L{build.path}&quot;" recipe.objcopy.eep.pattern="" recipe.objcopy.hex.pattern="&quot;{runtime.tools.esptool.path}/{compiler.esptool.cmd}&quot; -eo &quot;{runtime.platform.path}/bootloaders/eboot/eboot.elf&quot; -bo &quot;{build.path}/{build.project_name}.bin&quot; -bm {build.flash_mode} -bf {build.flash_freq} -bz {build.flash_size} -bs .text -bp 4096 -ec -eo &quot;{build.path}/{build.project_name}.elf&quot; -bs .irom0.text -bs .text -bs .data -bs .rodata -bc -ec" recipe.output.tmp_file="{build.project_name}.bin" recipe.output.save_file="{build.project_name}.{build.variant}.bin" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.irom0\.text|\.text|\.data|\.rodata|)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.rodata|\.bss)\s+([0-9]+).*" tools.esptool.cmd="esptool.exe" tools.esptool.cmd.windows="esptool.exe" tools.esptool.path="{runtime.tools.esptool.path}" tools.esptool.network_cmd="python.exe" tools.esptool.network_cmd.windows="python.exe" tools.esptool.upload.protocol="esp" tools.esptool.upload.params.verbose="-vv" tools.esptool.upload.params.quiet="" tools.esptool.upload.pattern="&quot;{path}/{cmd}&quot; {upload.verbose} -cd {upload.resetmethod} -cb {upload.speed} -cp &quot;{serial.port}&quot; -ca 0x00000 -cf &quot;{build.path}/{build.project_name}.bin&quot;" tools.esptool.upload.network_pattern="&quot;{network_cmd}&quot; &quot;{runtime.platform.path}/tools/espota.py&quot; -i &quot;{serial.port}&quot; -p &quot;{network.port}&quot; &quot;--auth={network.password}&quot; -f &quot;{build.path}/{build.project_name}.bin&quot;" tools.mkspiffs.cmd="mkspiffs.exe" tools.mkspiffs.cmd.windows="mkspiffs.exe" tools.mkspiffs.path="{runtime.tools.mkspiffs.path}" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\Extensions\pbd1usl1.2ll\Micro Platforms\arduino16x" runtime.tools.esptool.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.9" runtime.tools.esptool-0.4.9.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.9" runtime.tools.xtensa-lx106-elf-gcc.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" runtime.tools.xtensa-lx106-elf-gcc-1.20.0-26-gb404fb9-2.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" runtime.tools.mkspiffs.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.1.2" runtime.tools.mkspiffs-0.1.2.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.1.2" runtime.tools.ameba_tools.path="C:\Users\oitzh\AppData\Local\arduino15\packages\realtek\tools\ameba_tools\1.0.9" runtime.tools.ameba_tools-1.0.9.path="C:\Users\oitzh\AppData\Local\arduino15\packages\realtek\tools\ameba_tools\1.0.9" runtime.tools.arduinoOTA.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.0.0.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arm-none-eabi-gcc.path="C:\Users\oitzh\AppData\Local\arduino15\packages\realtek\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\oitzh\AppData\Local\arduino15\packages\realtek\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino8.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.3-arduino2.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.tools-avr.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.vm.boardinfo.id="esp8266_nodemcuv2" runtime.vm.boardinfo.name="esp8266_nodemcuv2" runtime.vm.boardinfo.desc="NodeMCU 1.0 (ESP-12E Module)" runtime.vm.boardinfo.src_location="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.9.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.appid="arduino16x" location.sketchbook="C:\Users\oitzh\Documents\Arduino" build.core.vmresolved="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0\cores\esp8266" build.core.parentfolder.vmresolved="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0\cores" build.core.coresparentfolder.vmresolved="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0" build.core.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0\cores\esp8266" vm.core.include="Arduino.h" vm.boardsource.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0" runtime.platform.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0" vm.platformname.name="esp8266" build.arch="ESP8266" builder.noino="false" build.flash_ld="eagle.flash.4m.ld" build.spiffs_start="0x100000" build.spiffs_end="0x3FB000" build.spiffs_blocksize="8192" build.spiffs_pagesize="256" build.architecture="1.20.0-26-gb404fb9-2" vmresolved.compiler.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2\bin\" vmresolved.tools.path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" build.variant.vmresolved.name="nodemcu" build.variant.vmresolved.full_path="C:\Users\oitzh\AppData\Local\arduino15\packages\esp8266\hardware\esp8266\2.3.0\variants\nodemcu" build.path="C:\Users\oitzh\AppData\Local\Temp\VMBuilds\newSensors\esp8266_nodemcuv2\Debug" build.project_name="newSensors.ino" build.project_path="C:\Users\oitzh\Documents\Arduino\newSensors" ProjectDir="C:\Users\oitzh\Documents\Arduino\newSensors\" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM5" serial.port="COM5" serial.port.num="5" serial.port.caption="COM5   - Silicon Labs CP210x USB to UART Bridge" serial.Caption="Silicon Labs CP210x USB to UART Bridge (COM5)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_FF" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Silicon Labs CP210x USB to UART Bridge" serial.DeviceID="USB\VID_10C4&amp;PID_EA60\0001" serial.HardwareID.value0="USB\VID_10C4&amp;PID_EA60" serial.Manufacturer="Silicon Labs" serial.Name="Silicon Labs CP210x USB to UART Bridge (COM5)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_10C4&amp;PID_EA60\0001" serial.Present="True" serial.Service="silabser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="OMRI-PC" serial.vid="0x10C4" serial.pid="0xEA60" serial.iserial="0001" serial.port.iserial="0001" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\oitzh\AppData\Local\Temp\VMBuilds\newSensors\esp8266_nodemcuv2\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="sensors.ino, line 114" Id="00ddc287-df24-43ee-8bc2-a8b6fab124dd" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="114" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="19" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='00ddc287-df24-43ee-8bc2-a8b6fab124dd'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>107		Serial.print(", packetid ");
108		Serial.println(message.id);
109		Serial.print("Payload ");
110		char* msg = new char[message.payloadlen + 1]();
111		memcpy(msg, message.payload, message.payloadlen);
112	
113		StaticJsonBuffer&lt;MESSAGE_LENGTH&gt; jsonBuffer;
--&gt;114		//DynamicJsonBuffer jsonBuffer;
115		char json[] = "{\"sender\":\"motion\",\"motion\":\"when_arriving\",\"climate\":\"\",\"time\":\"\",\"location\":\"\"}";
116		JsonObject&amp; root = jsonBuffer.parseObject(json);
117		if (root.success()) {
118			if (strcmp(sensorData.sender,SENSOR_NAME)!=0) {
119				//sensorData.sender = SENSOR_NAME;
120				//sensorData.climate = root["climate"];
121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
123				sensorData.location = root["location"].as&lt;String&gt;();
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="sensors.ino, line 99" Id="b2b61a23-104d-4b38-8e8a-ce28a29e1bf2" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="99" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b2b61a23-104d-4b38-8e8a-ce28a29e1bf2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>92	SFE_BMP180 pressure;
93	
94	//callback to handle mqtt messages
95	void messageArrived(MQTT::MessageData&amp; md)
96	{
97		MQTT::Message &amp;message = md.message;
98	
--&gt;99		Serial.print("Message ");
100		Serial.print(++arrivedcount);
101		Serial.print(" arrived: qos ");
102		Serial.print(message.qos);
103		Serial.print(", retained ");
104		Serial.print(message.retained);
105		Serial.print(", dup ");
106		Serial.print(message.dup);
107		Serial.print(", packetid ");
108		Serial.println(message.id);
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="sensors.ino, line 115" Id="ffae414a-b6df-4d5f-b4e5-f00a2daab5d7" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="115" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="20" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ffae414a-b6df-4d5f-b4e5-f00a2daab5d7'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>108		Serial.println(message.id);
109		Serial.print("Payload ");
110		char* msg = new char[message.payloadlen + 1]();
111		memcpy(msg, message.payload, message.payloadlen);
112	
113		StaticJsonBuffer&lt;MESSAGE_LENGTH&gt; jsonBuffer;
114		//DynamicJsonBuffer jsonBuffer;
--&gt;115		char json[] = "{\"sender\":\"motion\",\"motion\":\"when_arriving\",\"climate\":\"\",\"time\":\"\",\"location\":\"\"}";
116		JsonObject&amp; root = jsonBuffer.parseObject(json);
117		if (root.success()) {
118			if (strcmp(sensorData.sender,SENSOR_NAME)!=0) {
119				//sensorData.sender = SENSOR_NAME;
120				//sensorData.climate = root["climate"];
121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
123				sensorData.location = root["location"].as&lt;String&gt;();
124				sendmessage();
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="sensors.ino, line 116" Id="8e756fb0-ba74-43b5-a932-c7323076b071" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="116" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="21" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='8e756fb0-ba74-43b5-a932-c7323076b071'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>109		Serial.print("Payload ");
110		char* msg = new char[message.payloadlen + 1]();
111		memcpy(msg, message.payload, message.payloadlen);
112	
113		StaticJsonBuffer&lt;MESSAGE_LENGTH&gt; jsonBuffer;
114		//DynamicJsonBuffer jsonBuffer;
115		char json[] = "{\"sender\":\"motion\",\"motion\":\"when_arriving\",\"climate\":\"\",\"time\":\"\",\"location\":\"\"}";
--&gt;116		JsonObject&amp; root = jsonBuffer.parseObject(json);
117		if (root.success()) {
118			if (strcmp(sensorData.sender,SENSOR_NAME)!=0) {
119				//sensorData.sender = SENSOR_NAME;
120				//sensorData.climate = root["climate"];
121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
123				sensorData.location = root["location"].as&lt;String&gt;();
124				sendmessage();
125				Serial.println("Message sent");
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="sensors.ino, line 117" Id="4416e0cb-0751-4223-b8ff-47c91df2313b" Enabled="1" Message="{root.success()}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="117" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="22" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4416e0cb-0751-4223-b8ff-47c91df2313b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>110		char* msg = new char[message.payloadlen + 1]();
111		memcpy(msg, message.payload, message.payloadlen);
112	
113		StaticJsonBuffer&lt;MESSAGE_LENGTH&gt; jsonBuffer;
114		//DynamicJsonBuffer jsonBuffer;
115		char json[] = "{\"sender\":\"motion\",\"motion\":\"when_arriving\",\"climate\":\"\",\"time\":\"\",\"location\":\"\"}";
116		JsonObject&amp; root = jsonBuffer.parseObject(json);
--&gt;117		if (root.success()) {
118			if (strcmp(sensorData.sender,SENSOR_NAME)!=0) {
119				//sensorData.sender = SENSOR_NAME;
120				//sensorData.climate = root["climate"];
121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
123				sensorData.location = root["location"].as&lt;String&gt;();
124				sendmessage();
125				Serial.println("Message sent");
126			}
</Source>
        <MessageVariables>
          <MessageVariable Name="root.success()" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="sensors.ino, line 128" Id="c557d5d7-ac10-4a33-aa84-b4e954a111f2" Enabled="1" Message="msg deleted" MessageTextType="0" PreProcessedMessage="msg deleted" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="128" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="32" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c557d5d7-ac10-4a33-aa84-b4e954a111f2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
123				sensorData.location = root["location"].as&lt;String&gt;();
124				sendmessage();
125				Serial.println("Message sent");
126			}
127		}
--&gt;128		delete msg;
129	}
130	
131	//connects to websocket layer and mqtt layer
132	bool connect() {
133	
134		if (client == NULL) {
135			client = new MQTT::Client&lt;IPStack, Countdown, maxMQTTpackageSize, maxMQTTMessageHandlers&gt;(ipstack);
136		}
137		else {
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="sensors.ino, line 202" Id="3a609bd2-15a2-4a56-9897-2792bf12de89" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="202" FileColumn="1" FunctionName="sendmessage()" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3a609bd2-15a2-4a56-9897-2792bf12de89'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>195		}
196		Serial.println("MQTT subscribed");
197	}
198	
199	//send a message to a mqtt topic
200	void sendmessage() {
201		//send a message
--&gt;202		MQTT::Message message;
203		char buf[MESSAGE_LENGTH];
204		StaticJsonBuffer&lt;MESSAGE_LENGTH&gt; jsonBuffer;
205		//DynamicJsonBuffer jsonBuffer;
206		JsonObject&amp; root = jsonBuffer.createObject();
207		root["sender"] = SENSOR_NAME;
208		root["motion"] = sensorData.motion;
209		root["climate"] = sensorData.climate;
210		root["time"] = sensorData.time;
211		root["location"] = sensorData.location;
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="sensors.ino, line 123" Id="4a605e92-3438-4b20-9884-6dbf68ff9250" Enabled="1" Message="Sending message" MessageTextType="0" PreProcessedMessage="Sending message" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="123" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="29" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4a605e92-3438-4b20-9884-6dbf68ff9250'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>116		JsonObject&amp; root = jsonBuffer.parseObject(json);
117		if (root.success()) {
118			if (strcmp(sensorData.sender,SENSOR_NAME)!=0) {
119				//sensorData.sender = SENSOR_NAME;
120				//sensorData.climate = root["climate"];
121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
--&gt;123				sensorData.location = root["location"].as&lt;String&gt;();
124				sendmessage();
125				Serial.println("Message sent");
126			}
127		}
128		delete msg;
129	}
130	
131	//connects to websocket layer and mqtt layer
132	bool connect() {
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="sensors.ino, line 120" Id="68cc97ee-d531-423b-b444-a57e5ead36ad" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="120" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="25" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='68cc97ee-d531-423b-b444-a57e5ead36ad'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>113		StaticJsonBuffer&lt;MESSAGE_LENGTH&gt; jsonBuffer;
114		//DynamicJsonBuffer jsonBuffer;
115		char json[] = "{\"sender\":\"motion\",\"motion\":\"when_arriving\",\"climate\":\"\",\"time\":\"\",\"location\":\"\"}";
116		JsonObject&amp; root = jsonBuffer.parseObject(json);
117		if (root.success()) {
118			if (strcmp(sensorData.sender,SENSOR_NAME)!=0) {
119				//sensorData.sender = SENSOR_NAME;
--&gt;120				//sensorData.climate = root["climate"];
121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
123				sensorData.location = root["location"].as&lt;String&gt;();
124				sendmessage();
125				Serial.println("Message sent");
126			}
127		}
128		delete msg;
129	}
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="sensors.ino, line 118" Id="6b5b7904-1658-4e4e-aecf-2edda2617e3e" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\oitzh\documents\arduino\sensors\sensors.ino" FileLine="118" FileColumn="1" FunctionName="messageArrived(MQTT::MessageData&amp; md)" FunctionLineOffset="23" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6b5b7904-1658-4e4e-aecf-2edda2617e3e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>111		memcpy(msg, message.payload, message.payloadlen);
112	
113		StaticJsonBuffer&lt;MESSAGE_LENGTH&gt; jsonBuffer;
114		//DynamicJsonBuffer jsonBuffer;
115		char json[] = "{\"sender\":\"motion\",\"motion\":\"when_arriving\",\"climate\":\"\",\"time\":\"\",\"location\":\"\"}";
116		JsonObject&amp; root = jsonBuffer.parseObject(json);
117		if (root.success()) {
--&gt;118			if (strcmp(sensorData.sender,SENSOR_NAME)!=0) {
119				//sensorData.sender = SENSOR_NAME;
120				//sensorData.climate = root["climate"];
121				sensorData.motion = root["motion"].as&lt;String&gt;();
122				sensorData.time = root["time"].as&lt;String&gt;();
123				sensorData.location = root["location"].as&lt;String&gt;();
124				sendmessage();
125				Serial.println("Message sent");
126			}
127		}
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>